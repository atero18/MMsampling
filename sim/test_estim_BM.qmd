```{r}
library(dplyr)
library(glue)
library(tibble)
```

# Linear models on both modes

```{r}
set.seed(145L)
```

```{r}
N <- 10000L
```



Creating independent covariates

```{r}
p <- 3L

Z <- rnorm(n = N * p) %>% matrix(nrow = N, ncol = p)
```

Creating parameters for two modes : "int" and "tel"

```{r}
betaInt <- rnorm(n = p, mean = 1.0)
betaTel <- rnorm(n = p, mean = 2.0)
```



Simulating a mode selection MAR (Missing At Random) - Creation of the parameters

```{r}
# With MAR

alphaInt <- rnorm(n = p, mean = 0.0, sd = .5)
pInt <- 1.0 / (1.0 + exp(-Z %*% alphaInt)) %>% as.vector()
alphaTel <- rnorm(n = p, mean = 0.0, sd = .5)
pTel <- 1.0 / (1.0 + exp(-Z %*% alphaTel)) %>% as.vector()
```

```{r}
test <- function(typeProb = "true", ...)
{
  n <- ceiling(N / 4L) # SRS parameter
  selectedSample <- sample(seq_len(N), size = n, replace = FALSE)
  pi <- rep(n / N, N)
  I <- rep(FALSE, N)
  I[selectedSample] <- TRUE
  rm(selectedSample)
  
  
  Rint <- runif(N) <= pInt
  Rtel <- runif(N) <= pTel
  
  modes <- rep("nr", N)
  modes[Rint] <- "int"
  
  modes[!Rint & Rtel] <- "tel"
  
  modes[!I] <- "nr"
  
  if (typeProb == "true")
  {
    probsSelect <- rep(NA_real_, N)
    probsSelect[modes == "int"] <- pInt[modes == "int"]
    probsSelect[modes == "tel"] <- ((1.0 - pInt) * pTel)[modes == "tel"]
  }
  else if (typeProb == "estim")
  {
    probsSelect <- 
    estim_response_prob_sequential(I, Z, modes, c("int", "tel"))$unconditional
  }
  
  Yint <- Z %*% betaInt + rnorm(n = N)
  Ytel <- Z %*% betaTel + rnorm(n = N)
  
  phi <- rep(0.5, N)
  totalBias <- sum(phi * (Yint - Ytel))
  
  
  Yobs <- rep(NA_real_, N)
  Yobs[modes == "int"] <- Yint[modes == "int"]
  Yobs[modes == "tel"] <- Ytel[modes == "tel"]
  
  empTotBiasHT <- estim_delta_MCO(Z, Yobs, modes, "int", "tel", "HT", "HT", 
                         pi = pi, probsSelect = probsSelect) %>% 
    estim_MB_by_MCO(Z, phi = phi) %>% sum()
  
  empTotBias2MCO <- estim_delta_MCO(Z, Yobs, modes, "int", "tel", "MCO", "MCO", 
                         pi = pi, probsSelect = probsSelect) %>% 
    estim_MB_by_MCO(Z, phi = phi) %>% sum()
  
  c(trueBias = totalBias, 
    HT = empTotBiasHT,
    MCO = empTotBias2MCO)

}
```

```{r}
K <- 100L

set.seed(150L)

biasesTrueProb <- sapply(seq_len(K), test, typeProb = "true") %>%
  t() %>% 
  as.data.frame() %>%
  add_column(.before = 1L, experiment = seq_len(K)) %>% 
  pivot_longer(cols = c("HT", "MCO"),
               names_to = "estimator", values_to = "estBias") %>% 
  add_column(.before = "estBias", probSelect = "true")

head(biasesTrueProb) %>% print()
```

```{r}
set.seed(150L)

biasesEstimProb <- sapply(seq_len(K), test, typeProb = "estim") %>%
  t() %>% 
  as.data.frame() %>%
  add_column(.before = 1L, experiment = seq_len(K)) %>% 
  pivot_longer(cols = c("HT", "MCO"),
               names_to = "estimator", values_to = "estBias") %>% 
  add_column(.before = "estBias", probSelect = "estim")

head(biasesEstimProb) %>% print()
```

```{r}
res <- rbind(biasesTrueProb, biasesEstimProb) %>% 
  arrange(experiment)
res
```

```{r}
res %>%
  mutate(diff = estBias - trueBias) %>%
  group_by(estimator, probSelect) %>% 
  summarise(diffMean = mean(diff), MSE = mean(diff^2L)) %>% 
  arrange(MSE)
```
