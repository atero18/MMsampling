```{r}
library(dplyr)
library(glue)
library(tibble)
```

# Linear models on both modes

```{r}
set.seed(145L)
```

```{r}
N <- 10000L
```



Creating independent covariates

```{r}
p <- 3L

Z <- rnorm(n = N * p) %>% matrix(nrow = N, ncol = p)
```

Creating parameters for two modes : "int" and "tel"

```{r}
betaInt <- rnorm(n = p, mean = 1.0)
betaTel <- rnorm(n = p, mean = 2.0)
```



Simulating a mode selection MAR (Missing At Random) - Creation of the parameters

```{r}
# With MAR

alphaInt <- rnorm(n = p, mean = 0.0, sd = .5)
pInt <- 1.0 / (1.0 + exp(-Z %*% alphaInt)) %>% as.vector()
alphaTel <- rnorm(n = p, mean = 0.0, sd = .5)
pTel <- 1.0 / (1.0 + exp(-Z %*% alphaTel)) %>% as.vector()
```

```{r}
gen_choice_bimode <- function(I, p1, p2, mode1 = "int", mode2 = "tel")
{
  N <- length(p1)
  
  R1 <- runif(N) <= p1
  R2 <- runif(N) <= p2
  
  modes <- rep("nr", N)
  modes[R1] <- mode1
  
  modes[!R1 & R2] <- mode2
  
  modes[!I] <- "nr"
  
  modes
}
```

```{r}
test <- function(...)
{
  n <- ceiling(N / 4L) # SRS parameter
  selectedSample <- sample(seq_len(N), size = n, replace = FALSE)
  pi <- rep(n / N, N)
  I <- rep(FALSE, N)
  I[selectedSample] <- TRUE
  rm(selectedSample)
  
  
  modes <- gen_choice_bimode(I, pInt, pTel)

  trueProbsSelect <- rep(NA_real_, N)
  trueProbsSelect[modes == "int"] <- pInt[modes == "int"]
  trueProbsSelect[modes == "tel"] <- ((1.0 - pInt) * pTel)[modes == "tel"]

  
  
  Yint <- Z %*% betaInt + rnorm(n = N)
  Ytel <- Z %*% betaTel + rnorm(n = N)
  
  phi <- rep(0.5, N)
  totalBias <- sum(phi * (Yint - Ytel))
  
  
  Yobs <- rep(NA_real_, N)
  Yobs[modes == "int"] <- Yint[modes == "int"]
  Yobs[modes == "tel"] <- Ytel[modes == "tel"]
  
  sample <- MMSample$new(Z = Z, pi = pi, I = I, 
                         modes = modes, Yobs = Yobs, phi = phi)
  
  results <- data.frame(trueBias = numeric(), 
                        estimator = character(), 
                        probSelect = character(),
                        invMatrix = character(),
                        estBias = numeric())
  
  resEval <- 
    estim_delta_MCO(sample$Z, sample$Yobs, sample$modes, 
                           "int", "tel", "HT", "HT", pi, 
                    trueProbsSelect, sampleMatrix = FALSE) %>% 
    estim_MB_by_MCO(Z, phi = phi) %>% 
    sum()
  
  results <- results %>% 
    add_row(trueBias = totalBias, estimator = "HT", 
            probSelect = "true", invMatrix = "true", estBias = resEval)

  resEval <- 
    estim_delta_MCO(sample$Z, sample$Yobs, sample$modes, 
                           "int", "tel", "HT", "HT", pi, 
                    trueProbsSelect, sampleMatrix = TRUE) %>% 
    estim_MB_by_MCO(Z, phi = phi) %>% 
    sum()
  
  results <- results %>% 
    add_row(trueBias = totalBias, estimator = "HT", 
            probSelect = "true", invMatrix = "sample", estBias = resEval)
  

  resEval <- 
    estim_delta_MCO(sample$Z, sample$Yobs, sample$modes, 
                    "int", "tel", "MCO", "MCO", pi, trueProbsSelect) %>% 
    estim_MB_by_MCO(Z, phi = phi) %>% 
    sum()
  
  
  results <- results %>% 
    add_row(trueBias = totalBias, estimator = "G-COMP", 
            probSelect = "true", invMatrix = NA_character_, estBias = resEval)
  
  tempProbsSelect <- 
    estim_response_prob_sequential(I, Z, modes, c("int", "tel"))$unconditional
  

  resEval <- 
    estim_delta_MCO(sample$Z, sample$Yobs, sample$modes, 
                         "int", "tel", "HT", "HT", pi, 
                    tempProbsSelect, sampleMatrix = FALSE) %>% 
  estim_MB_by_MCO(Z, phi = phi) %>% 
  sum()
 
  
  results <- results %>% 
    add_row(trueBias = totalBias, estimator = "HT", 
            probSelect = "estimation", invMatrix = "true", estBias = resEval)
 

  resEval <- 
    estim_delta_MCO(sample$Z, sample$Yobs, sample$modes, 
                         "int", "tel", "HT", "HT", pi, 
                    tempProbsSelect, sampleMatrix = TRUE) %>% 
  estim_MB_by_MCO(Z, phi = phi) %>% 
  sum()
  
  results <- results %>% 
    add_row(trueBias = totalBias, estimator = "HT", 
            probSelect = "estimation", invMatrix = "sample", estBias = resEval)
  
  results
}
```

```{r}
K <- 200L

set.seed(150L)


biases <- lapply(seq_len(K), test, typeProb = "true")

biases <- do.call("rbind", biases)
biases <- biases %>% 
  add_column(.before = 1L, experiment = factor(rep(seq_len(K), each = nrow(biases) / K)))
```


```{r}
biases %>%
  mutate(diff = estBias - trueBias) %>%
  group_by(estimator, probSelect, invMatrix) %>% 
  summarise(diffMean = mean(diff), RMSE = sqrt(mean(diff^2L))) %>% 
  arrange(RMSE)
```
